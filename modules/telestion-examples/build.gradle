application {
    // Define the main class for the application.
    mainClass.set('de.wuespace.telestion.application.Application')
}

java {
    withJavadocJar()
    withSourcesJar()
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'Telestion Examples'
                description = 'Examples describing different use cases of Telestion'
                url = 'https://telestion.wuespace.de/'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id = 'jvpichowski'
                        name = 'Jan von Pichovski'
                        email = 'janvonpichowski@gmail.com'
                        url = 'https://github.com/jvpichowski'
                        organization = 'WüSpace e. V.'
                        organizationUrl = 'https://www.wuespace.de/'
                    }

                    developer {
                        id = 'cb0s'
                        name = 'Cedric Bös'
                        email = 'cedric.boes@online.de'
                        url = 'https://github.com/cb0s'
                        organization = 'WüSpace e. V.'
                        organizationUrl = 'https://www.wuespace.de/'
                    }

                    developer {
                        id = 'fussel178'
                        name = 'Ludwig Richter'
                        email = 'riluzm@posteo.de'
                        url = 'https://github.com/fussel178'
                        organization = 'WüSpace e. V.'
                        organizationUrl = 'https://www.wuespace.de/'
                    }

                    developer {
                        id = 'pklaschka'
                        name = 'Pablo Klaschka'
                        email = 'contact@pabloklaschka.de'
                        url = 'https://github.com/pklaschka'
                        organization = 'WüSpace e. V.'
                        organizationUrl = 'https://www.wuespace.de/'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/wuespace/telestion-core.git'
                    developerConnection = 'scm:git:ssh://git@github.com:wuespace/telestion-core.git'
                    url = 'https://github.com/wuespace/telestion-core/tree/main'
                }
            }
        }
    }

    repositories {
        maven {
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"

            credentials {
                username = System.getenv('OSSRH_USERNAME')
                password = System.getenv('OSSRH_PASSWORD')
            }
        }

        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/wuespace/telestion-core"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    required { gradle.forceSign || gradle.taskGraph.hasTask('publish') }
    // get key + key-id + password
    def signingKeyId = findProperty('signingKeyId') as String
    def signingKey = findProperty('signingKey') as String
    def signingPassword = findProperty('signingPassword') as String
    // decrypt key
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    // sign
    sign publishing.publications.maven
}

dependencies {
    implementation project(':modules:telestion-api')
    implementation project(':modules:telestion-services')

    implementation 'com.google.guava:guava:31.0.1-jre'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation "org.mockito:mockito-core:4.+"

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.33'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.0.1'

    implementation "io.vertx:vertx-web:4.2.3"
    implementation "io.vertx:vertx-core:4.2.4"
    implementation "io.vertx:vertx-hazelcast:4.2.3"
// implementation "io.vertx:vertx-infinispan:3.9.2"
    implementation "io.vertx:vertx-health-check:4.2.3"
    implementation "io.vertx:vertx-http-service-factory:4.2.4"
    implementation "io.vertx:vertx-rx-java2:4.2.4"
    implementation "io.vertx:vertx-config:4.2.3"
    implementation "io.vertx:vertx-service-factory:4.2.3"
    implementation "io.vertx:vertx-mongo-client:4.2.4"
    implementation "io.vertx:vertx-circuit-breaker:4.2.3"

    testImplementation "io.vertx:vertx-junit5:4.2.3"
}

test {
    useJUnitPlatform()
}
